/*

1) Springboot Test
 
Spring Initailizer를 통해서 프로젝트를 생성하면 spring-boot-starter-test dependency가 자동으로 추가됩니다. 
이것을 이용해서 Test 코드를 작성하면 됩니다. 



2)spring-boot-test-starter 구성요소

1. spring-boot-test: 테스트에 필요한 핵심 기능 라이브러리

2. spring-boot-test-autoconfigure: 테스트 진행 위한 Configuration 라이브러리



3) 테스트 코드를 작성하는 방법
given -when -then
given
테스트 수행전 테스트에 필요한 환경을 설정하는 단계입니다. 테스트에서 사용하는 변수를 정의하거나 Mock 객체를 통해 특정 상황에 대한 행동들을 정의합니다. (주어진 환경을 설계하는 단계)
when
테스트의 목적이되는 부분으로 어떤경우의 테스트할지가 나오는 단계입니다. 실제 테스트 코드가 작성되며 테스트를 통한 값이 도출됩니다.
then
테스트의 마무리단계로 결과를 검증하는 단계입니다. when 단계에서 나온 값을 검증하는작업이 포함됩니다. 결과값이 아니더라도 이 테스트를 통해 나온 결과를 검중해야한다면 이 단계에서 진행합니다.



4) 단위 테스트와 통합 테스트
 
단위(unit) 테스트: 하나의 모듈을 기준으로 독립적으로 진행되는 가장 작은 단위 테스트 -> 쉽게 말하면 하나의 기능 혹은 메서드라고 이해하면 됩니다.

통합(integration) 테스트: 모듈을 통합화는 과정에서 모듈 간의 호환성을 확인하는 테스트 -> unit이 하나였다면 반대로 여러 개의  계층이 테스트에 참여한 것이라고 생각하면 쉬울 거 같습니다.



5) 좋은 테스트를 작성하는 5가지 속성(F.I.R.S.T)
F.I.R.S.T 전략은 테스트 코드 작성에 도움을 주는 5가지 규칙을 의미합니다.

대체로 단위 테스트에 적용하기 적합한 규칙을 담고 있습니다.


- Fast (빠르게) : 빠르게 수행할 수 있는 테스트를 지향한다. 대체로 단순한 목적이거나, 외부 환경을 사용하지 않는 단위 테스트를 빠른 테스트라 할 수 있다.
- Isolated (독립적이게) : 하나의 목적을 위한 하나의 대상에서만의 수행을 지향한다. 다른 테스트 코드, 혹은 외부 소스를 활용한다면 외부 요인에 의해 테스트 수행이 실패할 수 있다.
- Repeatable (반복 가능하게) : 어떤 환경에서도 수행할 수 있는 테스트를 지향한다. 개발 환경 혹은 네트워크 연결 여부와 상관 없이 수행되어야 한다.
- Self-Validating (자가 검증) : 그 자체만으로 검증이 완료되는 테스트를 지향한다. 결괏값과 기댓값의 비교를 코드 내부가 아닌 개발자가 눈으로 직접 확인해선 안 된다.
- Timely (적시에) : 애플리케이션 코드 구현 전에 테스트 코드의 작성을 지향한다. 다만 이 원칙은 TDD를 전제로 하기 때문에, TDD가 아니라면 이 규칙을 제외하기도 한다.


6)Jpa를 사용하는 Repsitory Test
 

@DataJpaTest: Jpa를 사용하는 Repository에 대한 검증을 수행할 때 사용하는 어노테이션입니다. 

@DataJpaTest는 @Transaction을 포함하고 있어서 1개 의 테스트가 끝나면 Rollback 해 다른 테스트에게 영향을 미치지 않습니다.

@DataJpaTest로 검증할 수 있는 목록은 아래와 같습니다. 

DataSource에 대한 설정
CRUD가 제대로 동작하는지












 */