/*
연관관계 매핑 종류와 방향

One To One : 일대일(1 : 1)
One To Many : 일대다(1 : N)
Many To One : 다대일(N :1)
Many To Many : 다대다(N : M)
단방향 : 두 엔티티의 관계에서 한쪽의 엔티티만 참조하는 형식
양방향 : 두 엔티티의 관계에서 각 엔티티가 서로의 엔티티를 참조하는 형식
연관관계가 설정 시 한 테이블에서 다른 테이블의 기본값을 외래키로 갖게 된다. 
이런 관계에서 주인(Owner)이라는 개념이 사용 일반적으로 외래키를 가진 테이블이 관계의 주인 주인은 외래키를 사용할 수 있으나
상대 엔티티는 읽는 작업만 수행 가능하다.


1. 일대일 단방향 매핑
@OneToOne //(optional=false)
@JoinColumn(name = "product_number")
private Product product;

@OneToOne  어노테이션은 다른 엔티티 객체를 필드로 정의했을 때 일대일 연관관계로 매핑하기 위해 사용한다.
본 예시에서는 ProductDetail 엔티티에 Product 엔티티를 일대일 매핑하기 위해 작성한 코드이다.

@JoinColumn 어노테이션은 기본값이 설정돼 있어 자동으로 이름을 매핑하지만 
의도한 이름이 들어가지 않기 때문에 name 속성을 사용해 원하는 칼럼명을 지정하는 것이 좋다.




2. 일대일 양방향 매핑


객체에서 양방향 개념은 양쪽에서 단방향으로 서로를 매핑하는 것을 의미한다. 
앞서 ProductDetail에서 product를 매핑했으니 Product에서 ProductDetail을 매핑하면 된다.

@OneToOne
private ProductDetail productDetail;



3. 다대다 단방향 매핑

@ManyToMany : 다대다 관계
리스트로 필드를 가지는 객체에서는 외래키를 가지지 않기 때문에 별도의 @JoinColumn 을 설정할 필요가 없다.
@JoinTable(name = " ") : 중간 테이블 이름 지정
중간 테이블에서는 두 테이블에서 id 값을 가져와 두 개의 외래키가 설정된다.


4. 다대다 양방향 매핑
@ManyToMany : 다대다 관계
mappedBy : 양방향 관계의 주인 설정
중간 테이블이 연관관계를 설정하고 있기 때문에 DB의 테이블 구조는 변경되지 않는다.
중간 테이블을 통해 연관된 엔티티의 값을 가져온다.
그러나 중간 테이블 생성으로 인해 예기치 못한 쿼리가 생길 수 있으므로 관리가 힘들다.
따라서, 중간 테이블 생성 대신 일대다/다대일로 연관관계를 맺을 수 있는 테이블을 생성하여 JPA 에서 관리할 수 있도록 한다.
@ToString.Exlucde : 순환참조자 발생하기 때문에 둘 중 한 엔티티의 필드에 어노테이션을 붙인다.



영속성 전이 (Cascade)
특정 엔티티의 영속성 상태를 변경할 때 그 엔티티와 연관된 엔티티의 영속성에도 영향을 미쳐 영속성 상태를 변경하는 것

ALL : 모든 영속 상태 변경에 대해 영속성 전이를 적용
PERSIST : 엔티티가 영속화할 때 연관된 엔티티도 함께 영속화
MERGE : 엔티티를 영속성 컨텍스트에 병합할 때 연관된 엔티티도 병합
REMOVE : 엔티티를 제거할 때 연관된 엔티티도 제거
REFRESH : 엔티티를 새로고침할 때 연관된 엔티티도 새로고침
DETACH : 엔티티를 영속성 컨텍스트에서 제외하면 연관된 엔티티도 제외
고아 객체
JPA 에서 고아(orphan)란 부모 엔티티와 연관관계가 끊어진 엔티티를 의미
JPA 에는 고아 객체를 자동으로 제거하는 기능 존재
but, 자식 엔티티가 다른 엔티티와 연관관계를 가지고 있다면 고아 객체를 자동으로 제거하는 기능은 사용하지 않는 것이 좋다.
ex) @OneToMany(..., orphanRemoval true)

 */